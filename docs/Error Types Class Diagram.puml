@startuml
'https://plantuml.com/class-diagram
'interface Collection<E>
'interface Set<E>
skinparam BackgroundColor GhostWhite
skinparam ArrowPadding 2
skinparam linetype ortho
skinparam PackageBackgroundColor WhiteSmoke
skinparam packageStyle frame
'for grouping package names
set separator none
left to right direction

skinparam class {
  BackgroundColor MintCream
}
skinparam class<<enumeration>> {
  BackgroundColor MistyRose
}

package uk.gov.companieshouse.api.error {

    class ApiError {
        -error
        -errorValues: Map<String, String>
        -location
        -locationType
        -type

        +getError(): String
        +setError(String)
        +getErrorValues(): Map<String, String>
        +setErrorValues(Map<String, String>)
        +addErrorValue(String, String)
        +getLocation(): String
        +setLocation()
        +getLocationType(): String
        +setLocationType(String)
        +getType(): String
        +setType(String)
    }
}

package error {
    enum ErrorType <<enumeration>> {
        SERVICE("ch:service")
        VALIDATION("ch:validation")
        +getType(): String
    }

    enum LocationType <<enumeration>> {
        RESOURCE("resource")
        REQUEST_BODY("request-body")
        JSON_PATH("json-path")
        +getValue(): String
    }


    class ApiErrors {
    -errors: Set<ApiError>

    +add(ApiError): boolean
    +addAll(Collection<ApiError>): boolean
    +hasErrors(): boolean
    +contains(ApiError): boolean
    +getErrors(): Set<ApiError> <<unmodifiable>>
    +getErrorCount(): int
    }

    class RestExceptionHandler {
        {static}-CAUSE
        {static}-PARSE_MESSAGE_PATTERN: Pattern
        -validation: chLogger: Logger
        #Map<String, String>
        #handleHttpMessageNotReadable(HttpMessageNotReadableException, HttpHeaders, HttpStatus, WebRequest): ResponseEntity
        #handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException, HttpHeaders, HttpStatus, WebRequest): ResponseEntity
        #handleExceptionInternal(Exception, Object, HttpHeaders, HttpStatus, WebRequest): ResponseEntity
        +handleInvalidFilingException(InvalidFilingException, WebRequest): ApiErrors
        +handleMergePatchException(MergePatchException, WebRequest): ResponseEntity
        +handleConflictingFilingException(ConflictingFilingException, WebRequest): ApiErrors
        +handleResourceNotFoundException(FilingResourceNotFoundException, WebRequest): ApiErrors
        +handleServiceException(Exception, WebRequest): ApiErrors
        +handleAllUncaughtException(RuntimeException, WebRequest): ApiErrors
    }

        enum RetrievalFailureReason <<enumeration>> {
                FILING_NOT_FOUND
            }

}

 ApiErrors"1" o-- "0..*" ApiError :"contains   "

@enduml